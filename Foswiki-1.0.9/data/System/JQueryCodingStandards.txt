%META:TOPICINFO{author="ProjectContributor" comment="reprev" date="1265972954" format="1.1" reprev="1.2" version="1.2"}%
%META:TOPICPARENT{name="JQueryPlugin"}%
---+!! %TOPIC%
Follow [[http://drupal.org/node/172169][Drupal&#8217;s JavaScript coding standards]]

%TOC%
%JQREQUIRE{"chili"}%

---++ Shorthands
Use the jQuery shorthand =$= where possible:

<verbatim class="js">
$(function() { ... });
</verbatim>

instead of 

<verbatim class="js">
$(document).ready(function() { ... });
</verbatim>

---++ Wrap =$=

If you want to use jQuery&#8217;s =$= variable, wrap your code like this:

<verbatim class="js">
(function($) {

  // code using $ variable

})(jQuery);
</verbatim>

---++ Global variables

If you want to use global variables within the scope of your code, wrap your code like this:

<verbatim class="js">
(function() {

  var foo = 'bar'; // yay, it's almost like I'm global

})();
</verbatim>

If you want to use global variables in the global scope, put the variable in the =foswiki= namespace:

<verbatim class="js">
foswiki.foo = 'bar';
</verbatim>

Mind the predefined global variables. See next section.

---++ Propagating perl settings to javascript

The =jquery.foswiki= plugin will initialize the global =foswiki= object with a set of variables
that are created by reading =meta= tags in the HTML header. These have the format

<verbatim class="js">
<meta name="foswiki.foo.bar.baz" content="string/boolean/object/function" />
</verbatim>

---++ The =foswiki= object
This will create the appropriate sub-namespaces and initialize the named property with the value in the =content= attribute.

There is a set of predefined variables that can be used in your javascript code via the =foswiki= namespace:

<noautolink>
| *Name* | *Content* |
| foswiki.web | %<nop>WEB% |
| foswiki.topic | %<nop>TOPIC%" | 
| foswiki.scriptUrl | %<nop>SCRIPTURL% | 
| foswiki.scriptUrlPath | %<nop>SCRIPTURLPATH% |
| foswiki.pubUrl | %<nop>PUBURL% |
| foswiki.pubUrlPath | %<nop>PUBURLPATH% |
| foswiki.systemWebName | %<nop>SYSTEMWEB% |
| foswiki.usersWebName | %<nop>USERSWEB% |
| foswiki.wikiName | %<nop>WIKINAME% |
| foswiki.loginName | %<nop>USERNAME% |
| foswiki.wikiUserName | %<nop>WIKIUSERNAME% |
| foswiki.serverTime | %<nop>SERVERTIME% |
| foswiki.ImagePluginEnabled | %IF<nop>{"context ImagePluginEnabled" then="true" else="false"}% | 
| foswiki.MathModePluginEnabled | %IF<nop>{"context MathModePluginEnabled" then="true" else="false"}% |
</noautolink>

---++ Avoid Internet Explorer errors

   * Use an object if you need an associative array, not an array. [[http://ajaxian.com/archives/javascript-associative-arrays-considered-harmful][[source]]]
   * Declare all local variables with =var= before they are used.
   * Remove trailing commas from array and object definitions, i.e.:
     <verbatim class="js">var object = { foo: 'bar' }</verbatim> not 
     <verbatim class="js">var object = { foo: 'bar', }</verbatim>

---++ Metadata

Use JQueryMetadata to integrate jQuery plugins into Foswiki.

---++ <nop>LiveQuery

Use JQueryLiveQuery to initialize your plugin for all html elements of a page. Otherwise content
that is loaded asynchronously using ajax won't be initialized. !LiveQuery will take care of that
automatically.

Instead of

<verbatim class="js">
$(".jqPluginName").each(function() {
  // initializer
});
</verbatim>

use

<verbatim class="js">
$(".jqPluginName").livequery(function() {
  // initializer
});
</verbatim>

See JQueryMetadata for a more thorough example of useing metadata and livequery



%META:PREFERENCE{name="TOPICTITLE" title="TOPICTITLE" type="Local" value="JQuery Coding Standards"}%
